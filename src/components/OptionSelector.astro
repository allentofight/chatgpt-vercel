<!-- GPTOptions.astro -->
---
const options = [
  { title: 'GPT-3.5-turbo(4k)', description: 'GPT 3.5  模型，仅对充值用户提供。此模型支持 4k token（大约 2000 字）的上下文会话' },
  { title: 'GPT-4(8k)', description: '当前最先进的模型，仅对充值用户提供。GPT-4 擅长需要高级推理、复杂指令理解和更多创造力的任务。此模型支持 8k token（大约 4000 字）的上下文会话' },
  { title: 'GPT-4(32k)', description: '当前最先进的模型，仅对充值用户提供。GPT-4 擅长需要高级推理、复杂指令理解和更多创造力的任务。此模型支持 32k token（大约 1.6w 字）的上下文会话' },
];

let selectedOption = options[0].title;
---

<div class="container">
  <button id="options-button" class="border border-gray-300 px-3 py-1 rounded text-gray-700 bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500">
    <span id="selected-option-text">{selectedOption}</span>
    <span class="arrow-down">&#9662;</span>
  </button>
  <ul class="options" id="options-list" data-options={JSON.stringify(options)} data-selected={selectedOption} style="display: none;">
  {options.map((option, index) => (
    <li id={`option-${index}`} data-title={option.title} class={`whitespace-nowrap min-w-full border-t border-gray-200 first:border-t-0 ${selectedOption === option.title ? 'bg-gray-100 selected-option' : ''}`}>
      {option.title}
      {selectedOption === option.title ? <span class="inline-block ml-2 text-green-500">&#x2714;</span> : ''}
      <span class="description">{option.description}</span>
    </li>
  ))}
</ul>
</div>

<style>
  .container {
    position: relative;
  }

  .arrow-down {
     margin-left: 8px;
  }

  .options {
    position: absolute;
    background-color: white;
    list-style: none;
    padding: 0;
    margin: 0;
    border: 1px solid #e5e7eb;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
  li {
    padding: 0.5rem 1rem;
    position: relative;
  }
  li:hover {
    background-color: #f3f4f6;
  }
  li:hover ~ li.bg-gray-100 {
    background-color: white;
  }
  .description {
    display: none;
    position: absolute;
    left: 100%;
    top: 0;
    padding: 0.5rem;
    white-space: normal; /* Allow multiple lines for long descriptions */
    min-width: 250px; /* Set a maximum width for the description */
    max-width: 500px; /* Set a maximum width for the description */
    background-color: white;
    border: 1px solid #e5e7eb;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
  li:hover .description {
    display: block;
  }

  button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

</style>

<script is:inline>

  window.addEventListener('selectOption', (event) => {
    const selectedOption = event.detail;
    console.log('selectedOption = ', selectedOption)
    optionsButton.disabled = true
  });

  const optionsButton = document.getElementById('options-button');
  const optionsList = document.getElementById('options-list');
  const optionItems = optionsList.querySelectorAll('li');

  const optionsData = JSON.parse(optionsList.getAttribute('data-options'));

  // Set the default selected option
  const selectedOptionText = document.getElementById('selected-option-text');
  selectedOptionText.textContent = optionsList.getAttribute('data-selected');


  function handleClick(option, selectedItem) {
    const prevSelectedOption = optionsList.getAttribute('data-selected');

    if (prevSelectedOption) {
      const prevSelectedItem = optionsList.querySelector(`[data-title="${prevSelectedOption}"]`);
      prevSelectedItem.classList.remove('bg-gray-100');
      const prevCheckmark = prevSelectedItem.querySelector('.text-green-500');
      if (prevCheckmark) prevCheckmark.remove();
    }

    const newSelectedOption = option.title;
    optionsList.setAttribute('data-selected', newSelectedOption);
    selectedOptionText.textContent = newSelectedOption;

    optionsList.style.display = 'none';

    selectedItem.classList.add('bg-gray-100');
    selectedItem.insertAdjacentHTML('beforeend', '<span class="inline-block ml-2 text-green-500">&#x2714;</span>');
  }

  optionsButton.addEventListener('click', (event) => {
    event.stopPropagation();
    optionsList.style.display = optionsList.style.display === 'none' ? 'block' : 'none';
  });

  optionItems.forEach((item) => {
    const optionTitle = item.getAttribute('data-title');
    const optionObject = optionsData.find(option => option.title === optionTitle);
    item.addEventListener('click', (event) => {
      event.stopPropagation();
      handleClick(optionObject, item);
    });
  });

  window.addEventListener('click', () => {
    optionsList.style.display = 'none';
  });
</script>